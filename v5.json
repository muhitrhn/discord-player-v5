{"meta":{"generator":"0.9.0","format":20,"date":1624943785138},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"# Discord Player\nComplete framework to facilitate music commands using **[discord.js](https://discord.js.org)**.\n\n[![downloadsBadge](https://img.shields.io/npm/dt/discord-player?style=for-the-badge)](https://npmjs.com/discord-player)\n[![versionBadge](https://img.shields.io/npm/v/discord-player?style=for-the-badge)](https://npmjs.com/discord-player)\n[![discordBadge](https://img.shields.io/discord/558328638911545423?style=for-the-badge&color=7289da)](https://androz2091.fr/discord)\n[![wakatime](https://wakatime.com/badge/github/Androz2091/discord-player.svg)](https://wakatime.com/badge/github/Androz2091/discord-player)\n[![CodeFactor](https://www.codefactor.io/repository/github/androz2091/discord-player/badge/v5)](https://www.codefactor.io/repository/github/androz2091/discord-player/overview/v5)\n\n## Installation\n\n### Install **[discord-player](https://npmjs.com/package/discord-player)**\n\n```sh\n$ npm install --save discord-player\n```\n\n### Install **[@discordjs/opus](https://npmjs.com/package/@discordjs/opus)**\n\n```sh\n$ npm install --save @discordjs/opus\n```\n\n### Install FFmpeg or Avconv\n- Official FFMPEG Website: **[https://www.ffmpeg.org/download.html](https://www.ffmpeg.org/download.html)**\n\n- Node Module (FFMPEG): **[https://npmjs.com/package/ffmpeg-static](https://npmjs.com/package/ffmpeg-static)**\n\n- Avconv: **[https://libav.org/download](https://libav.org/download)**\n\n# Features\n- Simple & easy to use ðŸ¤˜\n- Beginner friendly ðŸ˜±\n- Audio filters ðŸŽ¸\n- Lightweight ðŸ›¬\n- Custom extractors support ðŸŒŒ\n- Lyrics ðŸ“ƒ\n- Multiple sources support âœŒ\n- Play in multiple servers at the same time ðŸš—\n\n## [Documentation](https://discord-player.js.org)\n\n## Getting Started\n\nHere is the code you will need to get started with discord-player. Then, you will be able to use `client.player` everywhere in your code!\n\n```js\nconst Discord = require(\"discord.js\"),\nclient = new Discord.Client({ intents: [\"GUILD_VOICE_STATES\", \"GUILD_MESSAGES\", \"GUILDS\"] }),\nsettings = {\n    prefix: \"!\",\n    token: \"Your Discord Token\"\n};\n\nconst { Player, QueryType } = require(\"discord-player\");\n\n// Create a new Player (you don't need any API Key)\nconst player = new Player(client);\n\n// To easily access the player\nclient.player = player;\n\n// add the trackStart event so when a song will be played this message will be sent\nclient.player.on(\"trackStart\", (queue, track) => queue.metadata.channel.send(`Now playing ${track.title}...`))\n\nclient.once(\"ready\", () => {\n    console.log(\"I'm ready !\");\n});\n\nclient.on(\"message\", async (message) => {\n\n    const args = message.content.slice(settings.prefix.length).trim().split(/ +/g);\n    const command = args.shift().toLowerCase();\n\n    // !play Despacito\n    // will play \"Despacito\" in the voice channel\n    if (command === \"play\") {\n        if (!message.member.voice.channel) return void message.reply(\"You are not in a voice channel!\");\n        if (message.guild.me.voice.channel && message.member.voice.channelID !== message.guild.me.voice.channelID) return void message.reply(\"You are not in my voice channel!\");\n\n        const queue = client.player.createQueue(message.guild, {\n            metadata: message\n        });\n        \n        // verify vc connection\n        try {\n            if (!queue.connection) await queue.connect(message.member.voice.channel);\n        } catch {\n            queue.destroy();\n            return void message.reply(\"Could not join your voice channel!\");\n        }\n\n        const track = await client.player.search(args[0], {\n            requestedBy: message.author\n        }).then(x => x.tracks[1]);\n        if (!track) return void message.reply(\"Track not found!\");\n\n        queue.play(track);\n    }\n\n});\n\nclient.login(settings.token);\n```\n\n## Supported websites\n\nBy default, discord-player supports **YouTube**, **Spotify** and **SoundCloud** streams only.\n\n### Optional dependencies\n\nDiscord Player provides an **Extractor API** that enables you to use your custom stream extractor with it. Some packages have been made by the community to add new features using this API.\n\n#### [@discord-player/extractor](https://github.com/Snowflake107/discord-player-extractors) (optional)\n\nOptional package that adds support for `vimeo`, `reverbnation`, `facebook`, `attachment links` and `lyrics`.\nYou just need to install it using `npm i --save @discord-player/extractor` (discord-player will automatically detect and use it).\n\n#### [@discord-player/downloader](https://github.com/DevSnowflake/discord-player-downloader) (optional)\n\n`@discord-player/downloader` is an optional package that brings support for +700 websites. The documentation is available [here](https://github.com/DevSnowflake/discord-player-downloader).\n\n## Examples of bots made with Discord Player\n\nThese bots are made by the community, they can help you build your own!\n\n* [AtlantaBot](https://github.com/Androz2091/AtlantaBot) by [Androz2091](https://github.com/Androz2091)\n* [Discord-Music](https://github.com/inhydrox/discord-music) by [inhydrox](https://github.com/inhydrox)\n* [Music-bot](https://github.com/ZerioDev/Music-bot) by [ZerioDev](https://github.com/ZerioDev)\n\n## Advanced\n\n### Use cookies\n\n```js\nconst player = new Player(client, {\n    ytdlOptions: {\n        requestOptions: {\n            headers: {\n                cookie: \"YOUR_YOUTUBE_COOKIE\"\n            }\n        }\n    }\n});\n```\n\n### Use custom proxies\n\n```js\nconst HttpsProxyAgent = require(\"https-proxy-agent\");\n\n// Remove \"user:pass@\" if you don't need to authenticate to your proxy.\nconst proxy = \"http://user:pass@111.111.111.111:8080\";\nconst agent = HttpsProxyAgent(proxy);\n\nconst player = new Player(client, {\n    ytdlOptions: {\n        requestOptions: { agent }\n    }\n});\n```\n","path":"docs/general/welcome.md"}}},"migrating":{"name":"Migrating","files":{"migrating":{"name":"Migrating to v5","type":"md","content":"# Migrating to Discord Player v5\n\nWe have introduced some breaking changes in Discord Player v5. Which means, your old code will no longer work with v5.\nThe new update brings new features as well as better management of different things. This also uses the new **[@discordjs/voice](https://github.com/discordjs/voice)** library!\n\n## Basic Example\n\n```diff\n- player.play(message, query);\n+ const queue = player.createQueue(message.guild);\n+ const song = await player.search(query, {\n+   requestedBy: message.author\n});\n+ \n+ try {\n+   await queue.connect(message.member.voice.channel);\n+ } catch {\n+   message.reply(\"Could not join your voice channel\");\n+ }\n+\n+ queue.addTrack(song.tracks[0]);\n+ queue.play();\n```\n\n> Everything related to music player is moved to `Queue`.\n\n## How do I reply to the event like v4?\n\nSince we got rid of `message` parameter in every method of the Discord Player, you no longer have access to the `message` object in events.\nInstead, we have added `<Queue>.metadata` prop as an alternative. This `metadata` can be anything, declared while creating queue:\n\n```js\nconst queue = player.createQueue(message.guild, {\n    metadata: message\n});\n```\n\nThe metadata `message` will always be available in every events emitted for that specific `Queue`. You can access it via `queue.metadata`:\n\n```js\nplayer.on(\"trackStart\", (queue, track) => {\n    const channel = queue.metadata.channel; // queue.metadata is your \"message\" object\n    channel.send(`ðŸŽ¶ | Started playing **${track.title}**`);\n});\n```\n\n## How do I stop the player\n\nYou have to use `<Queue>.destroy()` to destroy the queue. It will also stop the player.\n\n```js\nconst queue = player.getQueue(message.guild.id);\nif (queue) queue.destroy();\n```","path":"docs/migrating/migrating.md"}}},"extractors":{"name":"Extractors","files":{"extractor":{"name":"Extractors API","type":"md","content":"# Discord Player Extractor API\nThe Extractor API allows you to build your own stream extractor for **Discord Player**.\n\n# Example Extractor\nYour extractor should have 2 methods (required):\n - `validate(query): boolean`\n   \n   This method is called by Discord Player while validating the query provided via `Player.play()`. (Note that only `string` queries are passed to your extractor)\n\n - `getInfo(query): object`\n   \n   This method is used by Discord Player to create `Track` object. You can return your data here that gets passed to `Track`.\n   Your info must be similar to this:\n\n    ```js\n    {\n        // the title\n        title: \"Extracted by custom extractor\",\n        // the duration in ms\n        duration: 20000,\n        // the thumbnail\n        thumbnail: \"some thumbnail link\",\n        // engine, can be Readable streams or link to raw stream that gets played\n        engine: \"someStreamLink\",\n        // number of views\n        views: 0,\n        // author of this stream\n        author: \"Some Artist\",\n        // description\n        description: \"\",\n        // link of this stream\n        url: \"Some Link\"\n    }\n    ```\n\n - `version: string`\n\n   This should be the version of your extractor. It is not really important and is set to `0.0.0` by default.\n\n# Loading Extractors\nDiscord Player Extractors can be loaded using `Player.use(ExtractorName, Extractor)` method.\n\n## Register Extractor\n\n```js\nconst myExtractor = {\n  version: \"1.0.0\",\n  important: false,\n  validate: (query) => true,\n  getInfo: async (query) => {\n    return {\n        title: \"Extracted by custom extractor\",\n        duration: 20000,\n        thumbnail: \"some thumbnail link\",\n        engine: \"someStreamLink\",\n        views: 0,\n        author: \"Some Artist\",\n        description: \"\",\n        url: \"Some Link\"\n    };\n  }\n};\n\nplayer.use(\"GiveItSomeName\", myExtractor);\n```\n\n## Remove Extractor\n\n```js\nplayer.unuse(\"GiveItSomeName\");\n```\n\n# Readymade Extractors\n## **[@discord-player/extractor](https://github.com/Snowflake107/discord-player-extractors)**\nThis extractor enables optional sources such as `Discord Attachments`, `Vimeo`, `Facebook` and `Reverbnation`. It also enables the `Lyrics` feature!\n\n## **[@discord-player/downloader](https://github.com/DevSnowflake/discord-player-downloader)**\nThis extractor is based on **[YouTube DL](https://youtube-dl.org)**. This extractor enables `700+ websites` support. However, this extractor can get buggy and is not updated frequently. So, it is suggested to make your own extractor if you want to use it!\n\n```js\nconst downloader = require(\"@discord-player/downloader\").Downloader;\n\nplayer.use(\"YOUTUBE_DL\", downloader);\n```\n\n> Discord Player auto-detects and uses `@discord-player/extractor` if it is installed!","path":"docs/extractors/extractor.md"}}},"faq":{"name":"FAQ","files":{"custom_filters":{"name":"Custom Filters","type":"md","content":"# How to add custom audio filters?\n\nAudio filters in **Discord Player** are **[FFmpeg audio filters](http://ffmpeg.org/ffmpeg-all.html#Audio-Filters)**. You can add your own audio filter like this:\n\n```js\nconst { AudioFilters } = require(\"discord-player\");\n\nAudioFilters.define(\"3D\", \"apulsator=hz=0.128\");\n\n// later, it can be used like this\nqueue.setFilters({ \"3D\": true });\n```","path":"docs/faq/custom_filters.md"},"slash_commands":{"name":"Slash Commands","type":"md","content":"# Slash Commands Example\n\nYou can use Discord Player with slash commands. **[Here](https://github.com/Androz2091/discord-player/tree/v5/example/music-bot)** is an example on how to use this framework with slash commands.","path":"docs/faq/slash_commands.md"}}},"youtube":{"name":"YouTube","files":{"cookies":{"name":"Using Cookies","type":"md","content":"# Using Cookies to avoid 429\n\n```js\nconst { Player } = require(\"discord-player\");\n\nconst player = new Player(client, {\n    ytdlOptions: {\n        requestOptions: {\n            headers: {\n                cookie: \"YOUR_YOUTUBE_COOKIE\"\n            }\n        }\n    }\n});\n```\n\n> Keep in mind that using `cookies` after getting `429` **does not fix the problem**.\n> You should use `cookies` before getting `429` which helps to **_reduce_** `Error: Status Code 429`","path":"docs/youtube/cookies.md"},"proxy":{"name":"Using Proxy","type":"md","content":"# Using Proxy to avoid 429\n\n```js\nconst { Player } = require(\"discord-player\");\nconst HttpsProxyAgent = require(\"https-proxy-agent\");\n\n// Remove \"user:pass@\" if you don't need to authenticate to your proxy.\nconst proxy = \"http://user:pass@111.111.111.111:8080\";\nconst agent = HttpsProxyAgent(proxy);\n\nconst player = new Player(client, {\n    ytdlOptions: {\n        requestOptions: { agent }\n    }\n});\n```","path":"docs/youtube/proxy.md"}}}},"classes":[{"name":"Player","construct":{"name":"Player","description":"<p>Creates new Discord Player</p>","params":[{"name":"client","description":"<p>The Discord Client</p>","type":[[["Client"]]]},{"name":"options","description":"<p>The player init options</p>","optional":true,"default":"{}","type":[[["DiscordPlayerInitOptions"]]]}]},"props":[{"name":"client","description":"<p>The discord.js client</p>","type":[[["Client"]]],"meta":{"line":38,"file":"Player.ts","path":"src"}},{"name":"options","description":"<p>The extractors collection</p>","type":[[["ExtractorModel"]]],"meta":{"line":44,"file":"Player.ts","path":"src"}}],"methods":[{"name":"_handleVoiceState","description":"<p>Handles voice state update</p>","access":"private","params":[{"name":"oldState","description":"<p>The old voice state</p>","type":[[["VoiceState"]]]},{"name":"newState","description":"<p>The new voice state</p>","type":[[["VoiceState"]]]}],"returns":[[["void"]]],"meta":{"line":61,"file":"Player.ts","path":"src"}},{"name":"createQueue","description":"<p>Creates a queue for a guild if not available, else returns existing queue</p>","params":[{"name":"guild","description":"<p>The guild</p>","type":[[["GuildResolvable"]]]},{"name":"queueInitOptions","description":"<p>Queue init options</p>","type":[[["PlayerOptions"]]]}],"returns":[[["Queue"]]],"meta":{"line":121,"file":"Player.ts","path":"src"}},{"name":"getQueue","description":"<p>Returns the queue if available</p>","params":[{"name":"guild","description":"<p>The guild id</p>","type":[[["GuildResolvable"]]]}],"returns":[[["Queue"]]],"meta":{"line":142,"file":"Player.ts","path":"src"}},{"name":"deleteQueue","description":"<p>Deletes a queue and returns deleted queue object</p>","params":[{"name":"guild","description":"<p>The guild id to remove</p>","type":[[["GuildResolvable"]]]}],"returns":[[["Queue"]]],"meta":{"line":153,"file":"Player.ts","path":"src"}},{"name":"search","description":"<p>Search tracks</p>","params":[{"name":"query","description":"<p>The search query</p>","type":[[["string"]],[["Track"]]]},{"name":"options","description":"<p>The search options</p>","type":[[["SearchOptions"]]]}],"async":true,"returns":[[["Promise","<"],["SearchResult",">"]]],"meta":{"line":176,"file":"Player.ts","path":"src"}},{"name":"use","description":"<p>Registers extractor</p>","params":[{"name":"extractorName","description":"<p>The extractor name</p>","type":[[["string"]]]},{"name":"extractor","description":"<p>The extractor object</p>","type":[[["ExtractorModel"]],[["any"]]]},{"name":"force","description":"<p>Overwrite existing extractor with this name (if available)</p>","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["ExtractorModel"]]],"meta":{"line":444,"file":"Player.ts","path":"src"}},{"name":"unuse","description":"<p>Removes registered extractor</p>","params":[{"name":"extractorName","description":"<p>The extractor name</p>","type":[[["string"]]]}],"returns":[[["ExtractorModel"]]],"meta":{"line":470,"file":"Player.ts","path":"src"}},{"name":"scanDeps","description":"<p>Generates a report of the dependencies used by the <code>@discordjs/voice</code> module. Useful for debugging.</p>","returns":[[["string"]]],"meta":{"line":482,"file":"Player.ts","path":"src"}}],"events":[{"name":"botDisconnect","description":"<p>Emitted when bot gets disconnected from a voice channel</p>","params":[{"name":"queue","description":"<p>The queue</p>","type":[[["Queue"]]]}],"meta":{"line":239,"file":"types.ts","path":"src/types"}},{"name":"channelEmpty","description":"<p>Emitted when the voice channel is empty</p>","params":[{"name":"queue","description":"<p>The queue</p>","type":[[["Queue"]]]}],"meta":{"line":245,"file":"types.ts","path":"src/types"}},{"name":"connectionCreate","description":"<p>Emitted when bot connects to a voice channel</p>","params":[{"name":"queue","description":"<p>The queue</p>","type":[[["Queue"]]]},{"name":"connection","description":"<p>The discord player connection object</p>","type":[[["StreamDispatcher"]]]}],"meta":{"line":251,"file":"types.ts","path":"src/types"}},{"name":"debug","description":"<p>Debug information</p>","params":[{"name":"queue","description":"<p>The queue</p>","type":[[["Queue"]]]},{"name":"message","description":"<p>The message</p>","type":[[["string"]]]}],"meta":{"line":258,"file":"types.ts","path":"src/types"}},{"name":"error","description":"<p>Emitted on error\n<warn>This event should handled properly otherwise it may crash your process!</warn></p>","params":[{"name":"queue","description":"<p>The queue</p>","type":[[["Queue"]]]},{"name":"error","description":"<p>The error</p>","type":[[["Error"]]]}],"meta":{"line":265,"file":"types.ts","path":"src/types"}},{"name":"connectionError","description":"<p>Emitted on connection error. Sometimes stream errors are emitted here as well.</p>","params":[{"name":"queue","description":"<p>The queue</p>","type":[[["Queue"]]]},{"name":"error","description":"<p>The error</p>","type":[[["Error"]]]}],"meta":{"line":273,"file":"types.ts","path":"src/types"}},{"name":"queueEnd","description":"<p>Emitted when queue ends</p>","params":[{"name":"queue","description":"<p>The queue</p>","type":[[["Queue"]]]}],"meta":{"line":280,"file":"types.ts","path":"src/types"}},{"name":"trackAdd","description":"<p>Emitted when a single track is added</p>","params":[{"name":"queue","description":"<p>The queue</p>","type":[[["Queue"]]]},{"name":"track","description":"<p>The track</p>","type":[[["Track"]]]}],"meta":{"line":286,"file":"types.ts","path":"src/types"}},{"name":"tracksAdd","description":"<p>Emitted when multiple tracks are added</p>","params":[{"name":"queue","description":"<p>The queue</p>","type":[[["Queue"]]]},{"name":"tracks","description":"<p>The tracks</p>","type":[[["Array","<"],["Track",">"]]]}],"meta":{"line":293,"file":"types.ts","path":"src/types"}},{"name":"trackStart","description":"<p>Emitted when a track starts playing</p>","params":[{"name":"queue","description":"<p>The queue</p>","type":[[["Queue"]]]},{"name":"track","description":"<p>The track</p>","type":[[["Track"]]]}],"meta":{"line":300,"file":"types.ts","path":"src/types"}}],"meta":{"line":30,"file":"Player.ts","path":"src"}},{"name":"ExtractorModel","construct":{"name":"ExtractorModel","description":"<p>Model for raw Discord Player extractors</p>","params":[{"name":"extractorName","description":"<p>Name of the extractor</p>","type":[[["string"]]]},{"name":"data","description":"<p>Extractor object</p>","type":[[["object"]]]}]},"props":[{"name":"name","description":"<p>The extractor name</p>","type":[[["string"]]],"meta":{"line":14,"file":"ExtractorModel.ts","path":"src/Structures"}},{"name":"_raw","description":"<p>The raw model</p>","access":"private","type":[[["any"]]],"meta":{"line":20,"file":"ExtractorModel.ts","path":"src/Structures"}},{"name":"version","description":"<p>The extractor version</p>","type":[[["string"]]],"meta":{"line":64,"file":"ExtractorModel.ts","path":"src/Structures"}}],"methods":[{"name":"handle","description":"<p>Method to handle requests from <code>Player.play()</code></p>","params":[{"name":"query","description":"<p>Query to handle</p>","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["ExtractorModelData",">"]]],"meta":{"line":29,"file":"ExtractorModel.ts","path":"src/Structures"}},{"name":"validate","description":"<p>Method used by Discord Player to validate query with this extractor</p>","params":[{"name":"query","description":"<p>The query to validate</p>","type":[[["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":55,"file":"ExtractorModel.ts","path":"src/Structures"}}],"meta":{"line":7,"file":"ExtractorModel.ts","path":"src/Structures"}},{"name":"Playlist","construct":{"name":"Playlist","description":"<p>Playlist constructor</p>","params":[{"name":"player","description":"<p>The player</p>","type":[[["Player"]]]},{"name":"data","description":"<p>The data</p>","type":[[["PlaylistInitData"]]]}]},"props":[{"name":"player","description":"<p>The player</p>","readonly":true,"type":[[["Player"]]],"meta":{"line":27,"file":"Playlist.ts","path":"src/Structures"}},{"name":"tracks","description":"<p>The tracks in this playlist</p>","type":[[["Array","<"],["Track",">"]]],"meta":{"line":35,"file":"Playlist.ts","path":"src/Structures"}},{"name":"author","description":"<p>The author of this playlist</p>","type":[[["object"]]],"meta":{"line":42,"file":"Playlist.ts","path":"src/Structures"}},{"name":"description","description":"<p>The description</p>","type":[[["string"]]],"meta":{"line":49,"file":"Playlist.ts","path":"src/Structures"}},{"name":"thumbnail","description":"<p>The thumbnail of this playlist</p>","type":[[["string"]]],"meta":{"line":56,"file":"Playlist.ts","path":"src/Structures"}},{"name":"type","description":"<p>The playlist type:</p>\n<ul>\n<li><code>album</code></li>\n<li><code>playlist</code></li>\n</ul>","type":[[["string"]]],"meta":{"line":63,"file":"Playlist.ts","path":"src/Structures"}},{"name":"source","description":"<p>The source of this playlist:</p>\n<ul>\n<li><code>youtube</code></li>\n<li><code>soundcloud</code></li>\n<li><code>spotify</code></li>\n<li><code>arbitrary</code></li>\n</ul>","type":[[["string"]]],"meta":{"line":72,"file":"Playlist.ts","path":"src/Structures"}},{"name":"id","description":"<p>The playlist id</p>","type":[[["string"]]],"meta":{"line":83,"file":"Playlist.ts","path":"src/Structures"}},{"name":"url","description":"<p>The playlist url</p>","type":[[["string"]]],"meta":{"line":90,"file":"Playlist.ts","path":"src/Structures"}},{"name":"title","description":"<p>The playlist title</p>","type":[[["string"]]],"meta":{"line":97,"file":"Playlist.ts","path":"src/Structures"}}],"methods":[{"name":"toJSON","description":"<p>JSON representation of this playlist</p>","params":[{"name":"withTracks","description":"<p>If it should build json with tracks</p>","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["PlaylistJSON"]]],"meta":{"line":114,"file":"Playlist.ts","path":"src/Structures"}}],"meta":{"line":21,"file":"Playlist.ts","path":"src/Structures"}},{"name":"Queue","construct":{"name":"Queue","description":"<p>Queue constructor</p>","params":[{"name":"player","description":"<p>The player that instantiated this queue</p>","type":[[["Player"]]]},{"name":"guild","description":"<p>The guild that instantiated this queue</p>","type":[[["Guild"]]]},{"name":"options","description":"<p>Player options for the queue</p>","optional":true,"default":"{}","type":[[["PlayerOptions"]]]}]},"props":[{"name":"player","description":"<p>The player that instantiated this queue</p>","readonly":true,"type":[[["Player"]]],"meta":{"line":37,"file":"Queue.ts","path":"src/Structures"}},{"name":"guild","description":"<p>The guild that instantiated this queue</p>","readonly":true,"type":[[["Guild"]]],"meta":{"line":44,"file":"Queue.ts","path":"src/Structures"}},{"name":"options","description":"<p>The player options for this queue</p>","type":[[["PlayerOptions"]]],"meta":{"line":51,"file":"Queue.ts","path":"src/Structures"}},{"name":"repeatMode","description":"<p>Queue repeat mode</p>","type":[[["QueueRepeatMode"]]],"meta":{"line":57,"file":"Queue.ts","path":"src/Structures"}},{"name":"metadata","description":"<p>Queue metadata</p>","type":[[["any"]]],"meta":{"line":63,"file":"Queue.ts","path":"src/Structures"}},{"name":"previousTracks","description":"<p>Previous tracks</p>","type":[[["Array","<"],["Track",">"]]],"meta":{"line":69,"file":"Queue.ts","path":"src/Structures"}},{"name":"tracks","description":"<p>Regular tracks</p>","type":[[["Array","<"],["Track",">"]]],"meta":{"line":75,"file":"Queue.ts","path":"src/Structures"}},{"name":"connection","description":"<p>The connection</p>","type":[[["StreamDispatcher"]]],"meta":{"line":81,"file":"Queue.ts","path":"src/Structures"}},{"name":"id","description":"<p>The ID of this queue</p>","type":[[["Snowflake"]]],"meta":{"line":87,"file":"Queue.ts","path":"src/Structures"}},{"name":"current","description":"<p>Returns current track</p>","type":[[["Track"]]],"meta":{"line":108,"file":"Queue.ts","path":"src/Structures"}},{"name":"destroyed","description":"<p>If this queue is destroyed</p>","type":[[["boolean"]]],"meta":{"line":117,"file":"Queue.ts","path":"src/Structures"}},{"name":"volume","description":"<p>The current volume amount</p>","type":[[["number"]]],"meta":{"line":286,"file":"Queue.ts","path":"src/Structures"}},{"name":"streamTime","description":"<p>The stream time of this queue</p>","type":[[["number"]]],"meta":{"line":318,"file":"Queue.ts","path":"src/Structures"}},{"name":"totalTime","description":"<p>Total duration</p>","type":[[["Number"]]],"meta":{"line":566,"file":"Queue.ts","path":"src/Structures"}}],"methods":[{"name":"nowPlaying","description":"<p>Returns current track</p>","returns":[[["Track"]]],"meta":{"line":125,"file":"Queue.ts","path":"src/Structures"}},{"name":"connect","description":"<p>Connects to a voice channel</p>","params":[{"name":"channel","description":"<p>The voice/stage channel</p>","type":[[["StageChannel"]],[["VoiceChannel"]]]}],"async":true,"returns":[[["Promise","<"],["Queue",">"]]],"meta":{"line":134,"file":"Queue.ts","path":"src/Structures"}},{"name":"destroy","description":"<p>Destroys this queue</p>","params":[{"name":"disconnect","description":"<p>If it should leave on destroy</p>","optional":true,"default":"this.options.leaveOnStop","type":[[["boolean"]]]}],"returns":[[["void"]]],"meta":{"line":189,"file":"Queue.ts","path":"src/Structures"}},{"name":"skip","description":"<p>Skips current track</p>","returns":[[["boolean"]]],"meta":{"line":203,"file":"Queue.ts","path":"src/Structures"}},{"name":"addTrack","description":"<p>Adds single track to the queue</p>","params":[{"name":"track","description":"<p>The track to add</p>","type":[[["Track"]]]}],"returns":[[["void"]]],"meta":{"line":215,"file":"Queue.ts","path":"src/Structures"}},{"name":"addTracks","description":"<p>Adds multiple tracks to the queue</p>","params":[{"name":"tracks","description":"<p>Array of tracks to add</p>","type":[[["Array","<"],["Track",">"]]]}],"meta":{"line":227,"file":"Queue.ts","path":"src/Structures"}},{"name":"setPaused","description":"<p>Sets paused state</p>","params":[{"name":"paused","description":"<p>The paused state</p>","type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":238,"file":"Queue.ts","path":"src/Structures"}},{"name":"setBitrate","description":"<p>Sets bitrate</p>","params":[{"name":"bitrate","description":"<p>bitrate to set</p>","type":[[["number"]],[["auto"]]]}],"returns":[[["void"]]],"meta":{"line":249,"file":"Queue.ts","path":"src/Structures"}},{"name":"setVolume","description":"<p>Sets volume</p>","params":[{"name":"amount","description":"<p>The volume amount</p>","type":[[["number"]]]}],"returns":[[["boolean"]]],"meta":{"line":261,"file":"Queue.ts","path":"src/Structures"}},{"name":"setRepeatMode","description":"<p>Sets repeat mode</p>","params":[{"name":"mode","description":"<p>The repeat mode</p>","type":[[["QueueRepeatMode"]]]}],"returns":[[["boolean"]]],"meta":{"line":273,"file":"Queue.ts","path":"src/Structures"}},{"name":"mute","description":"<p>Mutes the playback</p>","returns":[[["void"]]],"meta":{"line":300,"file":"Queue.ts","path":"src/Structures"}},{"name":"unmute","description":"<p>Unmutes the playback. If the last volume was set to 0, unmute will produce no effect.</p>","returns":[[["void"]]],"meta":{"line":310,"file":"Queue.ts","path":"src/Structures"}},{"name":"getFiltersEnabled","description":"<p>Returns enabled filters</p>","returns":[[["AudioFilters"]]],"meta":{"line":338,"file":"Queue.ts","path":"src/Structures"}},{"name":"getFiltersDisabled","description":"<p>Returns disabled filters</p>","returns":[[["AudioFilters"]]],"meta":{"line":347,"file":"Queue.ts","path":"src/Structures"}},{"name":"setFilters","description":"<p>Sets filters</p>","params":[{"name":"filters","description":"<p>Queue filters</p>","type":[[["QueueFilters"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":356,"file":"Queue.ts","path":"src/Structures"}},{"name":"seek","description":"<p>Seeks to the given time</p>","params":[{"name":"position","description":"<p>The position</p>","type":[[["number"]]]}],"async":true,"returns":[[["boolean"]]],"meta":{"line":395,"file":"Queue.ts","path":"src/Structures"}},{"name":"back","description":"<p>Plays previous track</p>","async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":415,"file":"Queue.ts","path":"src/Structures"}},{"name":"clear","description":"<p>Clear this queue</p>","meta":{"line":427,"file":"Queue.ts","path":"src/Structures"}},{"name":"stop","description":"<p>Stops the player</p>","returns":[[["void"]]],"meta":{"line":436,"file":"Queue.ts","path":"src/Structures"}},{"name":"shuffle","description":"<p>Shuffles this queue</p>","returns":[[["boolean"]]],"meta":{"line":445,"file":"Queue.ts","path":"src/Structures"}},{"name":"remove","description":"<p>Removes a track from the queue</p>","params":[{"name":"track","description":"<p>The track to remove</p>","type":[[["Track"]],[["Snowflake"]],[["number"]]]}],"returns":[[["Track"]]],"meta":{"line":464,"file":"Queue.ts","path":"src/Structures"}},{"name":"jump","description":"<p>Jumps to particular track</p>","params":[{"name":"track","description":"<p>The track</p>","type":[[["Track"]],[["number"]]]}],"returns":[[["void"]]],"meta":{"line":487,"file":"Queue.ts","path":"src/Structures"}},{"name":"getPlayerTimestamp","description":"<p>Returns player stream timestamp</p>","params":[{"name":"queue","description":"<p>If it should generate timestamp for the queue</p>","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["PlayerTimestamp"]]],"meta":{"line":508,"file":"Queue.ts","path":"src/Structures"}},{"name":"createProgressBar","description":"<p>Creates progress bar string</p>","params":[{"name":"options","description":"<p>The progress bar options</p>","type":[[["PlayerProgressbarOptions"]]]}],"returns":[[["string"]]],"meta":{"line":530,"file":"Queue.ts","path":"src/Structures"}},{"name":"play","description":"<p>Play stream in a voice/stage channel</p>","params":[{"name":"src","description":"<p>The track to play (if empty, uses first track from the queue)</p>","optional":true,"type":[[["Track"]]]},{"name":"options","description":"<p>The options</p>","optional":true,"default":"{}","type":[[["PlayOptions"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":575,"file":"Queue.ts","path":"src/Structures"}},{"name":"_handleAutoplay","description":"<p>Private method to handle autoplay</p>","access":"private","params":[{"name":"track","description":"<p>The source track to find its similar track for autoplay</p>","type":[[["Track"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":642,"file":"Queue.ts","path":"src/Structures"}},{"name":"toJSON","description":"<p>JSON representation of this queue</p>","returns":[[["object"]]],"meta":{"line":682,"file":"Queue.ts","path":"src/Structures"}},{"name":"toString","description":"<p>String representation of this queue</p>","returns":[[["string"]]],"meta":{"line":697,"file":"Queue.ts","path":"src/Structures"}}],"meta":{"line":30,"file":"Queue.ts","path":"src/Structures"}},{"name":"Track","construct":{"name":"Track","description":"<p>Track constructor</p>","params":[{"name":"player","description":"<p>The player that instantiated this Track</p>","type":[[["Player"]]]},{"name":"data","description":"<p>Track data</p>","type":[[["RawTrackData"]]]}]},"props":[{"name":"player","description":"<p>The player that instantiated this Track</p>","readonly":true,"type":[[["Player"]]],"meta":{"line":27,"file":"Track.ts","path":"src/Structures"}},{"name":"title","description":"<p>Title of this track</p>","type":[[["string"]]],"meta":{"line":35,"file":"Track.ts","path":"src/Structures"}},{"name":"description","description":"<p>Description of this track</p>","type":[[["string"]]],"meta":{"line":41,"file":"Track.ts","path":"src/Structures"}},{"name":"author","description":"<p>Author of this track</p>","type":[[["string"]]],"meta":{"line":47,"file":"Track.ts","path":"src/Structures"}},{"name":"url","description":"<p>URL of this track</p>","type":[[["string"]]],"meta":{"line":53,"file":"Track.ts","path":"src/Structures"}},{"name":"thumbnail","description":"<p>Thumbnail of this track</p>","type":[[["string"]]],"meta":{"line":59,"file":"Track.ts","path":"src/Structures"}},{"name":"duration","description":"<p>Duration of this track</p>","type":[[["string"]]],"meta":{"line":65,"file":"Track.ts","path":"src/Structures"}},{"name":"views","description":"<p>Views count of this track</p>","type":[[["number"]]],"meta":{"line":71,"file":"Track.ts","path":"src/Structures"}},{"name":"requestedBy","description":"<p>Person who requested this track</p>","type":[[["User"]]],"meta":{"line":77,"file":"Track.ts","path":"src/Structures"}},{"name":"fromPlaylist","description":"<p>If this track belongs to playlist</p>","type":[[["boolean"]]],"meta":{"line":83,"file":"Track.ts","path":"src/Structures"}},{"name":"raw","description":"<p>Raw track data</p>","type":[[["RawTrackData"]]],"meta":{"line":89,"file":"Track.ts","path":"src/Structures"}},{"name":"id","description":"<p>The track id</p>","readonly":true,"type":[[["Snowflake"]]],"meta":{"line":95,"file":"Track.ts","path":"src/Structures"}},{"name":"queue","description":"<p>The queue in which this track is located</p>","type":[[["Queue"]]],"meta":{"line":119,"file":"Track.ts","path":"src/Structures"}},{"name":"durationMS","description":"<p>The track duration in millisecond</p>","type":[[["number"]]],"meta":{"line":127,"file":"Track.ts","path":"src/Structures"}},{"name":"source","description":"<p>Returns source of this track</p>","type":[[["TrackSource"]]],"meta":{"line":145,"file":"Track.ts","path":"src/Structures"}}],"methods":[{"name":"toString","description":"<p>String representation of this track</p>","returns":[[["string"]]],"meta":{"line":153,"file":"Track.ts","path":"src/Structures"}},{"name":"toJSON","description":"<p>Raw JSON representation of this track</p>","returns":[[["TrackJSON"]]],"meta":{"line":161,"file":"Track.ts","path":"src/Structures"}}],"meta":{"line":21,"file":"Track.ts","path":"src/Structures"}},{"name":"StreamDispatcher","access":"private","construct":{"name":"StreamDispatcher","description":"<p>Creates new connection object</p>","params":[{"name":"connection","description":"<p>The connection</p>","type":[[["VoiceConnection"]]]},{"name":"channel","description":"<p>The connected channel</p>","type":[[["VoiceChannel"]],[["StageChannel"]]]}]},"props":[{"name":"voiceConnection","description":"<p>The voice connection</p>","type":[[["VoiceConnection"]]],"meta":{"line":46,"file":"StreamDispatcher.ts","path":"src/VoiceInterface"}},{"name":"audioPlayer","description":"<p>The audio player</p>","type":[[["AudioPlayer"]]],"meta":{"line":52,"file":"StreamDispatcher.ts","path":"src/VoiceInterface"}},{"name":"channel","description":"<p>The voice channel</p>","type":[[["VoiceChannel"]],[["StageChannel"]]],"meta":{"line":58,"file":"StreamDispatcher.ts","path":"src/VoiceInterface"}},{"name":"paused","description":"<p>The paused state</p>","type":[[["boolean"]]],"meta":{"line":64,"file":"StreamDispatcher.ts","path":"src/VoiceInterface"}},{"name":"status","description":"<p>The player status</p>","type":[[["AudioPlayerStatus"]]],"meta":{"line":131,"file":"StreamDispatcher.ts","path":"src/VoiceInterface"}},{"name":"volume","description":"<p>The current volume</p>","type":[[["number"]]],"meta":{"line":206,"file":"StreamDispatcher.ts","path":"src/VoiceInterface"}},{"name":"streamTime","description":"<p>The playback time</p>","type":[[["number"]]],"meta":{"line":216,"file":"StreamDispatcher.ts","path":"src/VoiceInterface"}}],"methods":[{"name":"createStream","description":"<p>Creates stream</p>","params":[{"name":"src","description":"<p>The stream source</p>","type":[[["Readable"]],[["Duplex"]],[["string"]]]},{"name":"ops","description":"<p>Options</p>","optional":true,"default":"{}","type":[[["object"]]]}],"returns":[[["AudioResource"]]],"meta":{"line":114,"file":"StreamDispatcher.ts","path":"src/VoiceInterface"}},{"name":"disconnect","description":"<p>Disconnects from voice</p>","returns":[[["void"]]],"meta":{"line":139,"file":"StreamDispatcher.ts","path":"src/VoiceInterface"}},{"name":"end","description":"<p>Stops the player</p>","returns":[[["void"]]],"meta":{"line":150,"file":"StreamDispatcher.ts","path":"src/VoiceInterface"}},{"name":"pause","description":"<p>Pauses the stream playback</p>","params":[{"name":"interpolateSilence","description":"<p>If true, the player will play 5 packets of silence after pausing to prevent audio glitches.</p>","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":158,"file":"StreamDispatcher.ts","path":"src/VoiceInterface"}},{"name":"resume","description":"<p>Resumes the stream playback</p>","returns":[[["boolean"]]],"meta":{"line":169,"file":"StreamDispatcher.ts","path":"src/VoiceInterface"}},{"name":"playStream","description":"<p>Play stream</p>","params":[{"name":"resource","description":"<p>The audio resource to play</p>","optional":true,"default":"this.audioResource","type":[[["AudioResource","<"],["Track",">"]]]}],"async":true,"returns":[[["Promise","<"],["StreamDispatcher",">"]]],"meta":{"line":179,"file":"StreamDispatcher.ts","path":"src/VoiceInterface"}},{"name":"setVolume","description":"<p>Sets playback volume</p>","params":[{"name":"value","description":"<p>The volume amount</p>","type":[[["number"]]]}],"returns":[[["boolean"]]],"meta":{"line":193,"file":"StreamDispatcher.ts","path":"src/VoiceInterface"}}],"meta":{"line":37,"file":"StreamDispatcher.ts","path":"src/VoiceInterface"}},{"name":"VoiceUtils","access":"private","construct":{"name":"VoiceUtils","description":"<p>The voice utils</p>"},"props":[{"name":"cache","description":"<p>The cache where voice utils stores stream managers</p>","type":[[["Collection","<"],["Snowflake",", "],["StreamDispatcher",">"]]],"meta":{"line":14,"file":"VoiceUtils.ts","path":"src/VoiceInterface"}}],"methods":[{"name":"connect","description":"<p>Joins a voice channel, creating basic stream dispatch manager</p>","params":[{"name":"channel","description":"<p>The voice channel</p>","type":[[["StageChannel"]],[["VoiceChannel"]]]},{"name":"options","description":"<p>Join options</p>","optional":true,"default":"{}","type":[[["object"]]]}],"async":true,"returns":[[["Promise","<"],["StreamDispatcher",">"]]],"meta":{"line":21,"file":"VoiceUtils.ts","path":"src/VoiceInterface"}},{"name":"join","description":"<p>Joins a voice channel</p>","params":[{"name":"channel","description":"<p>The voice/stage channel to join</p>","optional":true,"type":[[["StageChannel"]],[["VoiceChannel"]]]},{"name":"options","description":"<p>Join options</p>","optional":true,"default":"{}","type":[[["object"]]]}],"async":true,"returns":[[["VoiceConnection"]]],"meta":{"line":40,"file":"VoiceUtils.ts","path":"src/VoiceInterface"}},{"name":"disconnect","description":"<p>Disconnects voice connection</p>","params":[{"name":"connection","description":"<p>The voice connection</p>","type":[[["VoiceConnection"]]]}],"returns":[[["void"]]],"meta":{"line":70,"file":"VoiceUtils.ts","path":"src/VoiceInterface"}},{"name":"getConnection","description":"<p>Returns Discord Player voice connection</p>","params":[{"name":"guild","description":"<p>The guild id</p>","type":[[["Snowflake"]]]}],"returns":[[["StreamDispatcher"]]],"meta":{"line":80,"file":"VoiceUtils.ts","path":"src/VoiceInterface"}}],"meta":{"line":9,"file":"VoiceUtils.ts","path":"src/VoiceInterface"}},{"name":"QueryResolver","construct":{"name":"QueryResolver","description":"<p>Query resolver</p>"},"methods":[{"name":"resolve","description":"<p>Resolves the given search query</p>","scope":"static","params":[{"name":"query","description":"<p>The query</p>","type":[[["string"]]]}],"returns":[[["QueryType"]]],"meta":{"line":27,"file":"QueryResolver.ts","path":"src/utils"}},{"name":"getVimeoID","description":"<p>Parses vimeo id from url</p>","scope":"static","params":[{"name":"query","description":"<p>The query</p>","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":48,"file":"QueryResolver.ts","path":"src/utils"}}],"meta":{"line":20,"file":"QueryResolver.ts","path":"src/utils"}},{"name":"Util","construct":{"name":"Util","description":"<p>Utils</p>"},"methods":[{"name":"durationString","description":"<p>Creates duration string</p>","scope":"static","params":[{"name":"durObj","description":"<p>The duration object</p>","type":[[["object"]]]}],"returns":[[["string"]]],"meta":{"line":12,"file":"Util.ts","path":"src/utils"}},{"name":"parseMS","description":"<p>Parses milliseconds to consumable time object</p>","scope":"static","params":[{"name":"milliseconds","description":"<p>The time in ms</p>","type":[[["number"]]]}],"returns":[[["TimeData"]]],"meta":{"line":23,"file":"Util.ts","path":"src/utils"}},{"name":"buildTimeCode","description":"<p>Builds time code</p>","scope":"static","params":[{"name":"duration","description":"<p>The duration object</p>","type":[[["TimeData"]]]}],"returns":[[["string"]]],"meta":{"line":39,"file":"Util.ts","path":"src/utils"}},{"name":"last","description":"<p>Picks last item of the given array</p>","scope":"static","params":[{"name":"arr","description":"<p>The array</p>","type":[[["Array","<"],["any",">"]]]}],"returns":[[["any"]]],"meta":{"line":56,"file":"Util.ts","path":"src/utils"}},{"name":"isVoiceEmpty","description":"<p>Checks if the voice channel is empty</p>","scope":"static","params":[{"name":"channel","description":"<p>The voice channel</p>","type":[[["VoiceChannel"]],[["StageChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":67,"file":"Util.ts","path":"src/utils"}},{"name":"require","description":"<p>Safer require</p>","scope":"static","params":[{"name":"id","description":"<p>Node require id</p>","type":[[["string"]]]}],"returns":[[["any"]]],"meta":{"line":76,"file":"Util.ts","path":"src/utils"}},{"name":"wait","description":"<p>Asynchronous timeout</p>","scope":"static","params":[{"name":"time","description":"<p>The time in ms to wait</p>","type":[[["number"]]]}],"returns":[[["Promise","<"],["unknown",">"]]],"meta":{"line":89,"file":"Util.ts","path":"src/utils"}}],"meta":{"line":5,"file":"Util.ts","path":"src/utils"}}],"interfaces":[],"typedefs":[{"name":"SearchResult","type":[[["object"]]],"props":[{"name":"playlist","description":"<p>The playlist (if any)</p>","optional":true,"type":[[["Playlist"]]]},{"name":"tracks","description":"<p>The tracks</p>","type":[[["Array","<"],["Track",">"]]]}],"meta":{"line":171,"file":"Player.ts","path":"src"}},{"name":"PlayerTimestamp","type":[[["object"]]],"props":[{"name":"current","description":"<p>The current progress</p>","type":[[["string"]]]},{"name":"end","description":"<p>The total time</p>","type":[[["string"]]]},{"name":"progress","description":"<p>Progress in %</p>","type":[[["number"]]]}],"meta":{"line":501,"file":"Queue.ts","path":"src/Structures"}},{"name":"QueueFilters","type":[[["AudioFilters"]]],"meta":{"line":11,"file":"types.ts","path":"src/types"}},{"name":"TrackSource","description":"<p>The track source:</p>\n<ul>\n<li>soundcloud</li>\n<li>youtube</li>\n<li>spotify</li>\n<li>arbitrary</li>\n</ul>","type":[[["string"]]],"meta":{"line":50,"file":"types.ts","path":"src/types"}},{"name":"RawTrackData","type":[[["object"]]],"props":[{"name":"title","description":"<p>The title</p>","type":[[["string"]]]},{"name":"description","description":"<p>The description</p>","type":[[["string"]]]},{"name":"author","description":"<p>The author</p>","type":[[["string"]]]},{"name":"url","description":"<p>The url</p>","type":[[["string"]]]},{"name":"thumbnail","description":"<p>The thumbnail</p>","type":[[["string"]]]},{"name":"duration","description":"<p>The duration</p>","type":[[["string"]]]},{"name":"views","description":"<p>The views</p>","type":[[["number"]]]},{"name":"requestedBy","description":"<p>The user who requested this track</p>","type":[[["User"]]]},{"name":"playlist","description":"<p>The playlist</p>","optional":true,"type":[[["Playlist"]]]},{"name":"source","description":"<p>The source</p>","optional":true,"default":"\"arbitrary\"","type":[[["TrackSource"]]]},{"name":"engine","description":"<p>The engine</p>","optional":true,"type":[[["any"]]]},{"name":"live","description":"<p>If this track is live</p>","optional":true,"type":[[["boolean"]]]},{"name":"raw","description":"<p>The raw data</p>","optional":true,"type":[[["any"]]]}],"meta":{"line":60,"file":"types.ts","path":"src/types"}},{"name":"TimeData","type":[[["object"]]],"props":[{"name":"days","description":"<p>Time in days</p>","type":[[["number"]]]},{"name":"hours","description":"<p>Time in hours</p>","type":[[["number"]]]},{"name":"minutes","description":"<p>Time in minutes</p>","type":[[["number"]]]},{"name":"seconds","description":"<p>Time in seconds</p>","type":[[["number"]]]}],"meta":{"line":92,"file":"types.ts","path":"src/types"}},{"name":"PlayerProgressbarOptions","type":[[["object"]]],"props":[{"name":"timecodes","description":"<p>If it should render time codes</p>","optional":true,"type":[[["boolean"]]]},{"name":"queue","description":"<p>If it should create progress bar for the whole queue</p>","optional":true,"type":[[["boolean"]]]},{"name":"length","description":"<p>The bar length</p>","optional":true,"type":[[["number"]]]},{"name":"line","description":"<p>The bar track</p>","optional":true,"type":[[["string"]]]},{"name":"indicator","description":"<p>The indicator</p>","optional":true,"type":[[["string"]]]}],"meta":{"line":106,"file":"types.ts","path":"src/types"}},{"name":"PlayerOptions","type":[[["object"]]],"props":[{"name":"leaveOnEnd","description":"<p>If it should leave on end</p>","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"leaveOnStop","description":"<p>If it should leave on stop</p>","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"leaveOnEmpty","description":"<p>If it should leave on empty</p>","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"leaveOnEmptyCooldown","description":"<p>The cooldown in ms</p>","optional":true,"default":1000,"type":[[["number"]]]},{"name":"autoSelfDeaf","description":"<p>If it should set the bot in deaf mode</p>","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"ytdlOptions","description":"<p>The youtube download options</p>","optional":true,"default":"{}","type":[[["YTDLDownloadOptions"]]]},{"name":"initialVolume","description":"<p>The initial player volume</p>","optional":true,"default":100,"type":[[["number"]]]}],"meta":{"line":122,"file":"types.ts","path":"src/types"}},{"name":"ExtractorModelData","type":[[["object"]]],"props":[{"name":"playlist","description":"<p>The playlist info (if any)</p>","optional":true,"type":[[["object"]]]},{"name":"playlist.title","description":"<p>The playlist title</p>","optional":true,"type":[[["string"]]]},{"name":"playlist.description","description":"<p>The playlist description</p>","optional":true,"type":[[["string"]]]},{"name":"playlist.thumbnail","description":"<p>The playlist thumbnail</p>","optional":true,"type":[[["string"]]]},{"name":"playlist.type","description":"<p>The playlist type: <code>album</code> | <code>playlist</code></p>","optional":true,"type":[[["album"]],[["playlist"]]]},{"name":"playlist.source","description":"<p>The playlist source</p>","optional":true,"type":[[["TrackSource"]]]},{"name":"playlist.author","description":"<p>The playlist author</p>","optional":true,"type":[[["object"]]]},{"name":"playlist.author.name","description":"<p>The author name</p>","optional":true,"type":[[["string"]]]},{"name":"playlist.author.url","description":"<p>The author url</p>","optional":true,"type":[[["string"]]]},{"name":"playlist.id","description":"<p>The playlist id</p>","optional":true,"type":[[["string"]]]},{"name":"playlist.url","description":"<p>The playlist url</p>","optional":true,"type":[[["string"]]]},{"name":"playlist.rawPlaylist","description":"<p>The raw data</p>","optional":true,"type":[[["any"]]]},{"name":"data","description":"<p>The data</p>","type":[[["Array","<"],["ExtractorData",">"]]]}],"meta":{"line":142,"file":"types.ts","path":"src/types"}},{"name":"ExtractorData","type":[[["object"]]],"props":[{"name":"title","description":"<p>The title</p>","type":[[["string"]]]},{"name":"duration","description":"<p>The duration</p>","type":[[["number"]]]},{"name":"thumbnail","description":"<p>The thumbnail</p>","type":[[["string"]]]},{"name":"engine","description":"<p>The stream engine</p>","type":[[["string"]],[["Readable"]],[["Duplex"]]]},{"name":"views","description":"<p>The views count</p>","type":[[["number"]]]},{"name":"author","description":"<p>The author</p>","type":[[["string"]]]},{"name":"description","description":"<p>The description</p>","type":[[["string"]]]},{"name":"url","description":"<p>The url</p>","type":[[["string"]]]},{"name":"version","description":"<p>The extractor version</p>","optional":true,"type":[[["string"]]]},{"name":"source","description":"<p>The source</p>","optional":true,"default":"\"arbitrary\"","type":[[["TrackSource"]]]}],"meta":{"line":159,"file":"types.ts","path":"src/types"}},{"name":"QueryType","description":"<p>The search query type\nThis can be one of:</p>\n<ul>\n<li>AUTO</li>\n<li>YOUTUBE</li>\n<li>YOUTUBE_PLAYLIST</li>\n<li>SOUNDCLOUD_TRACK</li>\n<li>SOUNDCLOUD_PLAYLIST</li>\n<li>SOUNDCLOUD</li>\n<li>SPOTIFY_SONG</li>\n<li>SPOTIFY_ALBUM</li>\n<li>SPOTIFY_PLAYLIST</li>\n<li>FACEBOOK</li>\n<li>VIMEO</li>\n<li>ARBITRARY</li>\n<li>REVERBNATION</li>\n<li>YOUTUBE_SEARCH</li>\n<li>SOUNDCLOUD_SEARCH</li>\n</ul>","type":[[["string"]]],"meta":{"line":201,"file":"types.ts","path":"src/types"}},{"name":"QueueRepeatMode","description":"<p>The queue repeat mode. This can be one of:</p>\n<ul>\n<li>OFF</li>\n<li>TRACK</li>\n<li>QUEUE</li>\n<li>AUTOPLAY</li>\n</ul>","type":[[["number"]]],"meta":{"line":349,"file":"types.ts","path":"src/types"}},{"name":"PlaylistInitData","type":[[["object"]]],"props":[{"name":"tracks","description":"<p>The tracks of this playlist</p>","type":[[["Array","<"],["Track",">"]]]},{"name":"title","description":"<p>The playlist title</p>","type":[[["string"]]]},{"name":"description","description":"<p>The description</p>","type":[[["string"]]]},{"name":"thumbnail","description":"<p>The thumbnail</p>","type":[[["string"]]]},{"name":"type","description":"<p>The playlist type: <code>album</code> | <code>playlist</code></p>","type":[[["album"]],[["playlist"]]]},{"name":"source","description":"<p>The playlist source</p>","type":[[["TrackSource"]]]},{"name":"author","description":"<p>The playlist author</p>","type":[[["object"]]]},{"name":"author.name","description":"<p>The author name</p>","optional":true,"type":[[["string"]]]},{"name":"author.url","description":"<p>The author url</p>","optional":true,"type":[[["string"]]]},{"name":"id","description":"<p>The playlist id</p>","type":[[["string"]]]},{"name":"url","description":"<p>The playlist url</p>","type":[[["string"]]]},{"name":"rawPlaylist","description":"<p>The raw playlist data</p>","optional":true,"type":[[["any"]]]}],"meta":{"line":364,"file":"types.ts","path":"src/types"}},{"name":"AudioFilters","description":"<p>The available audio filters</p>","type":[[["object"]]],"props":[{"name":"bassboost_low","description":"<p>The bassboost filter (+15dB)</p>","type":[[["string"]]]},{"name":"bassboost","description":"<p>The bassboost filter (+20dB)</p>","type":[[["string"]]]},{"name":"bassboost_high","description":"<p>The bassboost filter (+30dB)</p>","type":[[["string"]]]},{"name":"8D","description":"<p>The 8D filter</p>","type":[[["string"]]]},{"name":"vaporwave","description":"<p>The vaporwave filter</p>","type":[[["string"]]]},{"name":"nightcore","description":"<p>The nightcore filter</p>","type":[[["string"]]]},{"name":"phaser","description":"<p>The phaser filter</p>","type":[[["string"]]]},{"name":"tremolo","description":"<p>The tremolo filter</p>","type":[[["string"]]]},{"name":"vibrato","description":"<p>The vibrato filter</p>","type":[[["string"]]]},{"name":"reverse","description":"<p>The reverse filter</p>","type":[[["string"]]]},{"name":"treble","description":"<p>The treble filter</p>","type":[[["string"]]]},{"name":"normalizer","description":"<p>The normalizer filter (dynamic audio normalizer based)</p>","type":[[["string"]]]},{"name":"normalizer2","description":"<p>The normalizer filter (audio compressor based)</p>","type":[[["string"]]]},{"name":"surrounding","description":"<p>The surrounding filter</p>","type":[[["string"]]]},{"name":"pulsator","description":"<p>The pulsator filter</p>","type":[[["string"]]]},{"name":"subboost","description":"<p>The subboost filter</p>","type":[[["string"]]]},{"name":"kakaoke","description":"<p>The kakaoke filter</p>","type":[[["string"]]]},{"name":"flanger","description":"<p>The flanger filter</p>","type":[[["string"]]]},{"name":"gate","description":"<p>The gate filter</p>","type":[[["string"]]]},{"name":"haas","description":"<p>The haas filter</p>","type":[[["string"]]]},{"name":"mcompand","description":"<p>The mcompand filter</p>","type":[[["string"]]]},{"name":"mono","description":"<p>The mono filter</p>","type":[[["string"]]]},{"name":"mstlr","description":"<p>The mstlr filter</p>","type":[[["string"]]]},{"name":"mstrr","description":"<p>The mstrr filter</p>","type":[[["string"]]]},{"name":"compressor","description":"<p>The compressor filter</p>","type":[[["string"]]]},{"name":"expander","description":"<p>The expander filter</p>","type":[[["string"]]]},{"name":"softlimiter","description":"<p>The softlimiter filter</p>","type":[[["string"]]]},{"name":"chorus","description":"<p>The chorus filter</p>","type":[[["string"]]]},{"name":"chorus2d","description":"<p>The chorus2d filter</p>","type":[[["string"]]]},{"name":"chorus3d","description":"<p>The chorus3d filter</p>","type":[[["string"]]]},{"name":"fadein","description":"<p>The fadein filter</p>","type":[[["string"]]]},{"name":"dim","description":"<p>The dim filter</p>","type":[[["string"]]]},{"name":"earrape","description":"<p>The earrape filter</p>","type":[[["string"]]]}],"meta":{"line":5,"file":"AudioFilters.ts","path":"src/utils"}}],"externals":[]}